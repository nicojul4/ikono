/*
* This file was generated by the Gradle 'init' task.
*
* This generated file contains a sample Java library project to get you started.
* For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
*/

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    // JavaFX plugin
    id("org.openjfx.javafxplugin") version "0.1.0"
    // Application plugin for running JavaFX apps
    application
    // Tidak perlu plugin PlantUML karena kita pakai dependency langsung
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api(libs.commons.math3)

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation(libs.guava)

    // Hibernate dependencies with javax
    implementation("org.hibernate:hibernate-core:5.6.15.Final")
    implementation("org.hibernate:hibernate-entitymanager:5.6.15.Final")

    // MySQL Connector
    implementation("mysql:mysql-connector-java:8.0.33")

    // Connection Pool (HikariCP - recommended)
    implementation("com.zaxxer:HikariCP:5.0.1")

    // SLF4J for logging (required by Hibernate)
    implementation("org.slf4j:slf4j-api:1.7.36")
    implementation("org.slf4j:slf4j-simple:1.7.36")

    // javax.persistence API (for older Hibernate versions)
    implementation("javax.persistence:javax.persistence-api:2.2")

    // Bean Validation API
    implementation("javax.validation:validation-api:2.0.1.Final")
    implementation("org.hibernate.validator:hibernate-validator:6.2.5.Final")

    // JavaFX Controls and FXML
    implementation("org.openjfx:javafx-controls:21")
    implementation("org.openjfx:javafx-fxml:21")

    // PlantUML dependencies
    implementation("net.sourceforge.plantuml:plantuml:1.2024.3")
    
    // Untuk reflection dan parsing entities
    implementation("org.reflections:reflections:0.10.2")
}

// JavaFX configuration
javafx {
    version = "21"
    modules = listOf("javafx.controls", "javafx.fxml")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Application configuration (for JavaFX)
application {
    mainClass.set("_UASS2.MainAppUASS")
}

// Task untuk menjalankan aplikasi dengan JavaFX
tasks.named<JavaExec>("run") {
    // JVM arguments untuk JavaFX modules
    jvmArgs = listOf(
        "--add-opens", "javafx.fxml/javafx.fxml=ALL-UNNAMED"
    )
}

// Custom task untuk generate PlantUML diagram dari Hibernate entities
tasks.register<JavaExec>("generateEntityDiagram") {
    group = "documentation"
    description = "Generate PlantUML entity relationship diagram from Hibernate entities"
    
    // Configuration cache compatible
    classpath = sourceSets.main.get().runtimeClasspath
    mainClass.set("net.sourceforge.plantuml.Run")
    
    // Set arguments directly
    args("-tpng", "-o", "build/docs/diagrams", "src/main/resources/diagrams/entities.puml")
    
    dependsOn("compileJava")
    
    // Output directory creation
    outputs.dir("build/docs/diagrams")
    
    doFirst {
        mkdir("build/docs/diagrams")
    }
}

// Task untuk auto-generate PlantUML dari entities Java
tasks.register<JavaExec>("generateDiagramFromEntities") {
    group = "documentation"
    description = "Auto-generate PlantUML diagram from existing Hibernate entities"
    
    // Configuration cache compatible
    classpath = sourceSets.main.get().runtimeClasspath
    mainClass.set("_UASS2.util.EntityDiagramGenerator")
    
    dependsOn("compileJava")
    
    // Output directory creation
    outputs.dir("src/main/resources/diagrams")
    
    doFirst {
        mkdir("src/main/resources/diagrams")
    }
}

// Task untuk generate dokumentasi lengkap
tasks.register("generateDocs") {
    group = "documentation"
    description = "Generate all documentation including PlantUML diagrams"
    
    dependsOn("generateDiagramFromEntities", "generateEntityDiagram")
}